package security

import (
	"github.com/dutchcoders/go-clamd"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"server-security/utils"
	"sync"
)

var (
	malwareDetectedDirs []string
	malwareDetectedMux  sync.Mutex
)

func CheckForMalware(logger *log.Logger, dirPaths []string) {
	if !clamAVInstalled() {
		logger.Println("ClamAV is not installed. Running the installation script...")
		err := utils.RunScript("./bash/clamav.sh")
		if err != nil {
			logger.Printf("Error running ClamAV installation script: %v\n", err)
			return
		}
	}

	for _, dirPath := range dirPaths {
		err := filepath.Walk(dirPath, func(path string, info os.FileInfo, err error) error {
			if err != nil {
				logger.Printf("Error traversing directory %s: %v\n", path, err)
				return err
			}
			if !info.IsDir() {
				detected, err := malwareDetected(path)
				if err != nil {
					logger.Printf("Error scanning file %s: %v\n", path, err)
				} else if detected {
					logger.Printf("Malware detected in file: %s\n", path)
					malwareDetectedMux.Lock()
					malwareDetectedDirs = append(malwareDetectedDirs, path)
					malwareDetectedMux.Unlock()
				} else {
					logger.Println("No malware detected")
				}
			}
			return nil
		})
		if err != nil {
			logger.Printf("Error traversing directory %s: %v\n", dirPath, err)
		}
	}
}

func GetMalwareDetectedDirs() []string {
	malwareDetectedMux.Lock()
	defer malwareDetectedMux.Unlock()
	return malwareDetectedDirs
}

func clamAVInstalled() bool {
	_, err := exec.LookPath("clamscan")
	return err == nil
}

func malwareDetected(filePath string) (bool, error) {
	c := clamd.NewClamd("/var/run/clamav/clamd.ctl")
	responseChan, err := c.ScanFile(filePath)
	if err != nil {
		log.Printf("Error scanning file: %v", err)
		return false, err
	}
	for response := range responseChan {
		if response.Status == "FOUND" {
			return true, nil
		}
	}
	return false, nil
}
